{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apple Pass Generator Version: 0.0.1 Overview Python library to generate passes i.e (.pkpass) files compatible with Apple Wallet (former Passbook). Pass Types Currently, Apple Wallet supports 5 pass types all of which can be generated by this library: Boarding Pass Train tickets, airline boarding passes, and other types of transit passes. Each pass usually corresponds to a single trip with a specific starting and ending point. Coupons Coupons, special offers, and other discounts. If an offer has expired, the coupon can be updated with a new offer and expiration date. Event Tickets Entry into concerts, movies, plays, sporting events, or other events. Typically, each pass corresponds to a specific event, but you can also use a single pass for several events as with a season ticket. Store Cards Store loyalty cards, discount cards, points cards, and gift cards. If an account related to a store card carries a balance, the pass can be updated to display the current balance. Generic Any other type of pass, such as a gym membership card, in-store pickup receipt, or coat-check claim ticket. Note Visit here , for information regarding design of a pass.","title":"Overview"},{"location":"#apple-pass-generator","text":"Version: 0.0.1","title":"Apple Pass Generator"},{"location":"#overview","text":"Python library to generate passes i.e (.pkpass) files compatible with Apple Wallet (former Passbook).","title":"Overview"},{"location":"#pass-types","text":"Currently, Apple Wallet supports 5 pass types all of which can be generated by this library: Boarding Pass Train tickets, airline boarding passes, and other types of transit passes. Each pass usually corresponds to a single trip with a specific starting and ending point. Coupons Coupons, special offers, and other discounts. If an offer has expired, the coupon can be updated with a new offer and expiration date. Event Tickets Entry into concerts, movies, plays, sporting events, or other events. Typically, each pass corresponds to a specific event, but you can also use a single pass for several events as with a season ticket. Store Cards Store loyalty cards, discount cards, points cards, and gift cards. If an account related to a store card carries a balance, the pass can be updated to display the current balance. Generic Any other type of pass, such as a gym membership card, in-store pickup receipt, or coat-check claim ticket. Note Visit here , for information regarding design of a pass.","title":"Pass Types"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.1] - 2022-06-24 Added Initial Release","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#001-2022-06-24","text":"","title":"[0.0.1] - 2022-06-24"},{"location":"changelog/#added","text":"Initial Release","title":"Added"},{"location":"library/configuration/","text":"Configuration To start using the lib, some Apple files are needed, as well as some action in order to convert them to more friendly formats: 1. Get Pass Type ID Go to the Apple Developer page \u27b5 Identifiers \u27b5 Pass Type IDs . Next, you need to create a pass type ID. This is similar to the bundle ID for apps. It will uniquely identify a specific kind of pass. It should be of the form of a reverse-domain name style string (i.e., pass.com.example.appname). 2. Generate the necessary certificate After creating the pass type ID, click on Edit and follow the instructions to create a new Certificate. Once the process is finished, the pass certificate can be downloaded. That's not it though, the certificate is downloaded as .cer file, which need to be converted to .p12 in order to work. If you are using a Mac you can import it into Keychain Access and export it as .p12 from there. if now you have certificate.p12 file follow the steps below to convert it to certifictate.pem $ openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.pem 3. Generate the key.pem >$ openssl pkcs12 -in certificate.p12 -nocerts -out private.key Note while generating this private.key file you will be asked for a PEM pass phrase which will be used as the CERTIFICATE_PASSWORD attribute throughout the Package. 4. Getting WWDR Certificate If you have made iOS development, you probably have already the Apple Worldwide Developer Relations Intermediate Certificate in your Mac\u2019s keychain. If not, it can be downloaded from the Apple Website (on .cer format). This one needs to be exported as .pem , It can be exported from KeyChain into a .pem (e.g. wwdr.pem).","title":"Configuration"},{"location":"library/configuration/#configuration","text":"To start using the lib, some Apple files are needed, as well as some action in order to convert them to more friendly formats:","title":"Configuration"},{"location":"library/configuration/#1-get-pass-type-id","text":"Go to the Apple Developer page \u27b5 Identifiers \u27b5 Pass Type IDs . Next, you need to create a pass type ID. This is similar to the bundle ID for apps. It will uniquely identify a specific kind of pass. It should be of the form of a reverse-domain name style string (i.e., pass.com.example.appname).","title":"1. Get Pass Type ID"},{"location":"library/configuration/#2-generate-the-necessary-certificate","text":"After creating the pass type ID, click on Edit and follow the instructions to create a new Certificate. Once the process is finished, the pass certificate can be downloaded. That's not it though, the certificate is downloaded as .cer file, which need to be converted to .p12 in order to work. If you are using a Mac you can import it into Keychain Access and export it as .p12 from there. if now you have certificate.p12 file follow the steps below to convert it to certifictate.pem $ openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.pem","title":"2. Generate the necessary certificate"},{"location":"library/configuration/#3-generate-the-keypem","text":">$ openssl pkcs12 -in certificate.p12 -nocerts -out private.key Note while generating this private.key file you will be asked for a PEM pass phrase which will be used as the CERTIFICATE_PASSWORD attribute throughout the Package.","title":"3. Generate the key.pem"},{"location":"library/configuration/#4-getting-wwdr-certificate","text":"If you have made iOS development, you probably have already the Apple Worldwide Developer Relations Intermediate Certificate in your Mac\u2019s keychain. If not, it can be downloaded from the Apple Website (on .cer format). This one needs to be exported as .pem , It can be exported from KeyChain into a .pem (e.g. wwdr.pem).","title":"4. Getting WWDR Certificate"},{"location":"library/quickstart/","text":"Quickstart Here is some code to quickly get you started: from applepassgenerator import ApplePassGeneratorClient from applepassgenerator.models import EventTicket card_info = EventTicket () card_info . add_primary_field ( 'name' , 'Tony Stark' , 'Name' ) card_info . add_secondary_field ( 'loc' , 'USA' , 'Country' ) applepassgenerator_client = ApplePassGeneratorClient ( pass_type_identifier = \"pass.com.project.example\" , organization_name = \"PrimeDigital Global\" , team_identifier = \"<Team Identifier>\" ) apple_pass = applepassgenerator_client . get_pass ( card_info ) # Add logo/icon/strip image to file apple_pass . add_file ( \"logo.png\" , open ( \"<path-to-file>/logo.png\" , \"rb\" )) apple_pass . add_file ( \"icon.png\" , open ( \"<path-to-file>/icon.png\" , \"rb\" )) CERTIFICATE_PATH = '<path>/certificate.pem' PASSWORD_KEY = '<path>/password.key' WWDR_PATH = '<path>/wwdr.pem' CERTIFICATE_PASSWORD = \"<password>\" OUTPUT_PASS_NAME = \"mypass.pkpass\" # Creates a .pkpass file apple_pass . create ( CERTIFICATE_PATH , PASSWORD_KEY , WWDR_PATH , CERTIFICATE_PASSWORD , OUTPUT_PASS_NAME )","title":"Quickstart"},{"location":"library/quickstart/#quickstart","text":"Here is some code to quickly get you started: from applepassgenerator import ApplePassGeneratorClient from applepassgenerator.models import EventTicket card_info = EventTicket () card_info . add_primary_field ( 'name' , 'Tony Stark' , 'Name' ) card_info . add_secondary_field ( 'loc' , 'USA' , 'Country' ) applepassgenerator_client = ApplePassGeneratorClient ( pass_type_identifier = \"pass.com.project.example\" , organization_name = \"PrimeDigital Global\" , team_identifier = \"<Team Identifier>\" ) apple_pass = applepassgenerator_client . get_pass ( card_info ) # Add logo/icon/strip image to file apple_pass . add_file ( \"logo.png\" , open ( \"<path-to-file>/logo.png\" , \"rb\" )) apple_pass . add_file ( \"icon.png\" , open ( \"<path-to-file>/icon.png\" , \"rb\" )) CERTIFICATE_PATH = '<path>/certificate.pem' PASSWORD_KEY = '<path>/password.key' WWDR_PATH = '<path>/wwdr.pem' CERTIFICATE_PASSWORD = \"<password>\" OUTPUT_PASS_NAME = \"mypass.pkpass\" # Creates a .pkpass file apple_pass . create ( CERTIFICATE_PATH , PASSWORD_KEY , WWDR_PATH , CERTIFICATE_PASSWORD , OUTPUT_PASS_NAME )","title":"Quickstart"},{"location":"library/references/","text":"References Apple docs From now on, some stuff is much better explained on the Apple docs, so when in doubt just check (if you haven't done so) the following documents: Wallet Portal Wallet Developer Guide Crypto Signatures PassKit Package Format Reference Wallet Pass","title":"References"},{"location":"library/references/#references","text":"","title":"References"},{"location":"library/references/#apple-docs","text":"From now on, some stuff is much better explained on the Apple docs, so when in doubt just check (if you haven't done so) the following documents: Wallet Portal Wallet Developer Guide Crypto Signatures PassKit Package Format Reference Wallet Pass","title":"Apple docs"},{"location":"library/tutorial/","text":"Using Apple Wallet Pass Create a Pass Client from applepassgenerator import ApplePassGeneratorClient TEAM_IDENTIFIER = \"<your team id>\" PASS_TYPE_IDENTIFIER = \"pass.com.example.mypass\" ORGANIZATION_NAME = \"Primedigital Global\" client = ApplePassGeneratorClient ( TEAM_IDENTIFIER , PASS_TYPE_IDENTIFIER , ORGANIZATION_NAME ) Create a Card(Pass Layout) Create a Card Instance from applepassgenerator.models import EventTicket , Generic , Coupon , StoreCard , BoardingPass card0 = EventTicket () card1 = Generic () card2 = Coupon () card3 = StoreCard () card4 = BoardingPass () Add Card Details from applepassgenerator.models import StoreCard card_info = StoreCard () card_info . add_primary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_secondary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_header_field ( \"key\" , \"value\" , \"label\" ) card_info . add_auxiliary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_back_field ( \"key\" , \"value\" , \"label\" ) Create a Pass Instance apple_pass = client . get_pass ( card_info ) Add Icon, Logo, Strip, Thumbnail to your pass Note Adding icon.png and logo.png is also mandatory without which a pass will not be created. apple_pass . addFile ( \"logo.png\" , open ( \"<path-to-file>/logo.png\" , \"rb\" )) apple_pass . addFile ( \"logo@2x.png\" , open ( \"<path-to-file>/logo@2x.png\" , \"rb\" )) apple_pass . addFile ( \"icon.png\" , open ( \"<path-to-file>/icon.png\" , \"rb\" )) apple_pass . addFile ( \"icon@2x.png\" , open ( \"<path-to-file>/icon@2x.png\" , \"rb\" )) apple_pass . addFile ( \"strip.png\" , open ( \"<path-to-file>/strip.png\" , \"rb\" )) apple_pass . addFile ( \"strip@2x.png\" , open ( \"<path-to-file>/strip@2x.png\" , \"rb\" )) apple_pass . addFile ( \"thumbnail.png\" , open ( \"<path-to-file>/thumbnail.png\" , \"rb\" )) apple_pass . addFile ( \"thumbnail@2x.png\" , open ( \"<path-to-file>/thumbnail@2x.png\" , \"rb\" )) Note Similarly you could add footer.png and background.png to your pass. Adding Barcode to your pass: from applepassgenerator.models import Barcode apple_pass . barcode = Barcode ( message = 'Barcode message' ) Adding location data to your paas: from applepassgenerator.models import Location apple_pass . locations = Location ( \"latitude\" , \"longitude\" , \"altitude\" ) Note latitude and longitude are required fields. Further reference Adding beacons to your pass: from applepassgenerator.models import IBeacon apple_pass . ibeacons = IBeacon ( \"proximity_uuid\" , \"major\" , \"minor\" ) Note proximity_uuid is required. Further reference Adding Description to your pass: apple_pass . description = \"My Project Pass\" Adding Color to your pass: apple_pass . foreground_color = \"rgb(255, 255, 255)\" apple_pass . background_color = \"rgb(255, 110, 0)\" apple_pass . label_color = \"rgb(255, 255, 255)\" Checking Pass JSON Check if your pass is formed correctly before calling .create() apple_pass . json_dict () Generating a Pass(.pkpass) CERTIFICATE_PASSWORD = \"123456789\" apple_pass . serialNumber = '<some unique identifier>' apple_pass . create ( \"passes/certificates/certificate.pem\" , \"passes/certificates/private.key\" , \"passes/certificates/wwdr.pem\" , CERTIFICATE_PASSWORD , \"passes/mypass.pkpass\" , ) Note serialNumber will be used to uniquely identify a pass and is a mandatory field for creating a pass.","title":"Tutorial"},{"location":"library/tutorial/#using-apple-wallet-pass","text":"","title":"Using Apple Wallet Pass"},{"location":"library/tutorial/#create-a-pass-client","text":"from applepassgenerator import ApplePassGeneratorClient TEAM_IDENTIFIER = \"<your team id>\" PASS_TYPE_IDENTIFIER = \"pass.com.example.mypass\" ORGANIZATION_NAME = \"Primedigital Global\" client = ApplePassGeneratorClient ( TEAM_IDENTIFIER , PASS_TYPE_IDENTIFIER , ORGANIZATION_NAME )","title":"Create a Pass Client"},{"location":"library/tutorial/#create-a-cardpass-layout","text":"Create a Card Instance from applepassgenerator.models import EventTicket , Generic , Coupon , StoreCard , BoardingPass card0 = EventTicket () card1 = Generic () card2 = Coupon () card3 = StoreCard () card4 = BoardingPass () Add Card Details from applepassgenerator.models import StoreCard card_info = StoreCard () card_info . add_primary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_secondary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_header_field ( \"key\" , \"value\" , \"label\" ) card_info . add_auxiliary_field ( \"key\" , \"value\" , \"label\" ) card_info . add_back_field ( \"key\" , \"value\" , \"label\" )","title":"Create a Card(Pass Layout)"},{"location":"library/tutorial/#create-a-pass-instance","text":"apple_pass = client . get_pass ( card_info ) Add Icon, Logo, Strip, Thumbnail to your pass Note Adding icon.png and logo.png is also mandatory without which a pass will not be created. apple_pass . addFile ( \"logo.png\" , open ( \"<path-to-file>/logo.png\" , \"rb\" )) apple_pass . addFile ( \"logo@2x.png\" , open ( \"<path-to-file>/logo@2x.png\" , \"rb\" )) apple_pass . addFile ( \"icon.png\" , open ( \"<path-to-file>/icon.png\" , \"rb\" )) apple_pass . addFile ( \"icon@2x.png\" , open ( \"<path-to-file>/icon@2x.png\" , \"rb\" )) apple_pass . addFile ( \"strip.png\" , open ( \"<path-to-file>/strip.png\" , \"rb\" )) apple_pass . addFile ( \"strip@2x.png\" , open ( \"<path-to-file>/strip@2x.png\" , \"rb\" )) apple_pass . addFile ( \"thumbnail.png\" , open ( \"<path-to-file>/thumbnail.png\" , \"rb\" )) apple_pass . addFile ( \"thumbnail@2x.png\" , open ( \"<path-to-file>/thumbnail@2x.png\" , \"rb\" )) Note Similarly you could add footer.png and background.png to your pass. Adding Barcode to your pass: from applepassgenerator.models import Barcode apple_pass . barcode = Barcode ( message = 'Barcode message' ) Adding location data to your paas: from applepassgenerator.models import Location apple_pass . locations = Location ( \"latitude\" , \"longitude\" , \"altitude\" ) Note latitude and longitude are required fields. Further reference Adding beacons to your pass: from applepassgenerator.models import IBeacon apple_pass . ibeacons = IBeacon ( \"proximity_uuid\" , \"major\" , \"minor\" ) Note proximity_uuid is required. Further reference Adding Description to your pass: apple_pass . description = \"My Project Pass\" Adding Color to your pass: apple_pass . foreground_color = \"rgb(255, 255, 255)\" apple_pass . background_color = \"rgb(255, 110, 0)\" apple_pass . label_color = \"rgb(255, 255, 255)\"","title":"Create a Pass Instance"},{"location":"library/tutorial/#checking-pass-json","text":"Check if your pass is formed correctly before calling .create() apple_pass . json_dict ()","title":"Checking Pass JSON"},{"location":"library/tutorial/#generating-a-passpkpass","text":"CERTIFICATE_PASSWORD = \"123456789\" apple_pass . serialNumber = '<some unique identifier>' apple_pass . create ( \"passes/certificates/certificate.pem\" , \"passes/certificates/private.key\" , \"passes/certificates/wwdr.pem\" , CERTIFICATE_PASSWORD , \"passes/mypass.pkpass\" , ) Note serialNumber will be used to uniquely identify a pass and is a mandatory field for creating a pass.","title":"Generating a Pass(.pkpass)"}]}